name: ARM template deployment

on:
  pull_request:
    types: [closed]
    branches:
      - add-translation-function

permissions:
  id-token: write
  contents: read

jobs:
  provision:
    # Ensures that Azure resources are only provisioned if the PR has been accepted and merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - uses: actions/checkout@main

      # Log into Azure
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Ensure resource group exists before deploying resources
      - uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            az group create --name ${{ vars.RESOURCE_GROUP_NAME }} --location ${{ vars.RESOURCE_GROUP_LOCATION }}
            echo "Azure resource group created"

      # Deploy ARM template
      - name: Deploy Azure Resource Manager (ARM) Template
        uses: Azure/arm-deploy@v2
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'tenant', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ vars.RESOURCE_GROUP_NAME }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: './multilingual-nextjs-rg.bicep'
          # Incremental (only add resources to resource group) or Complete (remove extra resources from resource group) or Validate (only validates the template).
          deploymentMode: 'Incremental'

      # Deploy function app code
      - name: Deploy `TranslateContent` function to Azure Function App
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: 'multilingual-nextjs-functions'
          package: './multilingual-nextjs-functions'

      # Upload `_posts\en-us` to `input-files` blob container

      # Trigger `TranslateContent` function

      # Download `_posts\es-es` from `output-files` blob container

      # Deploy Next.js app code
