name: Translation and deployment

# on:
#   pull_request:
#     types: [closed]
#     branches:
#       - main
on: push

permissions:
  id-token: write
  contents: read

env:
  APP_LOCATION: '/' # location of your client code
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './multilingual-nextjs-functions'
  AZURE_WEBAPP_NAME: 'multilingual-nextjs-app'
  NODE_VERSION: '20.x'
  OUTPUT_LOCATION: '.next' # location of client code build output
  AZURE_STORAGE_ACCOUNT_NAME: 'multilingualnextjssa'

jobs:
  provision:
    # Ensures that Azure resources are only provisioned if the PR has been accepted and merged
    # if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: 'Log into Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Ensure resource group exists'
        uses: azure/cli@v2
        with:
          inlineScript: |
            #!/bin/bash
            az group create --name ${{ vars.RESOURCE_GROUP_NAME }} --location ${{ vars.RESOURCE_GROUP_LOCATION }}
            echo "Azure resource group created"

      - name: Deploy Azure Resource Manager (ARM) Template
        uses: azure/arm-deploy@v2
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'tenant', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ vars.RESOURCE_GROUP_NAME }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: './multilingual-nextjs-rg.bicep'
          # Incremental (only add resources to resource group) or Complete (remove extra resources from resource group) or Validate (only validates the template).
          deploymentMode: 'Incremental'
          parameters: appName=${{ env.AZURE_WEBAPP_NAME }}

  build-function-app:
    runs-on: ubuntu-latest
    needs: provision
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: 'Setup Node ${{ env.NODE_VERSION }} Environment'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 'Resolve project dependencies using NPM'
        shell: bash
        run: |
          pushd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          npm install
          npm run build --if-present
          npm run test --if-present
          popd

      - name: Zip artifact for deployment
        run: zip release.zip ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: multilingual-nextjs-functions
          path: release.zip

  deploy-function-app:
    runs-on: ubuntu-latest
    needs: build-function-app
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: multilingual-nextjs-functions

      - name: Unzip artifact for deployment
        run: unzip release.zip

      # Log into Azure
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy `TranslateContent` function to Azure Function App
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: 'multilingual-nextjs-functions'
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  translate:
    runs-on: ubuntu-latest
    needs: deploy-function-app
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: 'Log into Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Prepare for translation execution'
        uses: azure/cli@v2
        with:
          inlineScript: |
            #!/bin/bash
            az storage blob delete-batch --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --source 'output-files' --auth-mode key
            az storage blob delete-batch --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --source 'input-files' --auth-mode key
            az storage blob delete-batch --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --source 'glossaries' --auth-mode key
            az storage blob upload-batch --destination 'glossaries' --source './multilingual-nextjs-functions/src/glossaries' --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --auth-mode key
            az storage blob upload-batch --destination 'input-files' --source './_posts' --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --auth-mode key

      # - name: 'Trigger function app and wait for successful (200) response'

      - name: 'Add contents of `output-files` blob storage container to `_posts` folder'
        uses: azure/cli@v2
        with:
          inlineScript: |
            #!/bin/bash
            az storage blob download-batch --destination './_posts' --source 'output-files' --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --auth-mode key

      - name: 'Post translation clean-up'
        uses: azure/cli@v2
        with:
          inlineScript: |
            #!/bin/bash
            az storage blob delete-batch --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --source 'input-files' --auth-mode key
            az storage blob delete-batch --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --source 'output-files' --auth-mode key
            az storage blob delete-batch --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --source 'glossaries' --auth-mode key

  build-and-deploy-nextjs:
    runs-on: ubuntu-latest
    needs: translate

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Setup Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install Dependencies
        run: npm install

      - name: Build Next.js app
        run: npm run build

      # Log into Azure
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Static Web App API Key
        run: |
          api_key=$(az staticwebapp secrets list --name ${{ env.AZURE_WEBAPP_NAME }} --query "properties.apiKey" -o tsv)
          echo "API_KEY=$api_key" >> $GITHUB_ENV

      - name: Deploy to Azure Static Web Apps
        uses: azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.API_KEY }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for GitHub integrations (i.e. PR comments)
          action: 'upload'
          app_location: ${{ env.APP_LOCATION }}
          output_location: ${{ env.OUTPUT_LOCATION }}
          skip_app_build: true
